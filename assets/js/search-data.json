{
  
    
        "post0": {
            "title": "Images",
            "content": "import java.awt.Color; import java.awt.image.BufferedImage; import java.awt.Image; import java.awt.Graphics2D; import java.io.File; import java.io.FileWriter; import java.io.IOException; import java.io.PrintWriter; import java.nio.file.Files; import java.nio.file.Path; import java.nio.file.Paths; import javax.imageio.stream.ImageOutputStream; import javax.imageio.stream.ImageInputStream; import javax.imageio.metadata.IIOMetadata; import javax.imageio.IIOImage; import javax.imageio.ImageIO; import javax.imageio.ImageWriteParam; import javax.imageio.ImageWriter; import javax.imageio.ImageReader; import javax.imageio.ImageTypeSpecifier; public class Pics { private final String inDir = &quot;images/&quot;; // location of images private final String outDir = &quot;images/tmp/&quot;; // location of created files private String inFile; private String resizedFile; private String asciiFile; private String ext; // extension of file private long bytes; private int width; private int height; // Constructor obtains attributes of picture public Pics(String name, String ext) { this.ext = ext; this.inFile = this.inDir + name + &quot;.&quot; + ext; this.resizedFile = this.outDir + name + &quot;.&quot; + ext; this.asciiFile = this.outDir + name + &quot;.txt&quot;; this.setStats(); } // An image contains metadata, namely size, width, and height public void setStats() { BufferedImage img; try { Path path = Paths.get(this.inFile); this.bytes = Files.size(path); img = ImageIO.read(new File(this.inFile)); this.width = img.getWidth(); this.height = img.getHeight(); } catch (IOException e) { } } // Console print of data public void printStats(String msg) { System.out.println(msg + &quot;: &quot; + this.bytes + &quot; &quot; + this.width + &quot;x&quot; + this.height + &quot; &quot; + this.inFile); } // Convert scaled image into buffered image public static BufferedImage convertToBufferedImage(Image img) { // Create a buffered image with transparency BufferedImage bi = new BufferedImage( img.getWidth(null), img.getHeight(null), BufferedImage.TYPE_INT_ARGB); // magic? Graphics2D graphics2D = bi.createGraphics(); graphics2D.drawImage(img, 0, 0, null); graphics2D.dispose(); return bi; } // Scale or reduce to &quot;scale&quot; percentage provided public void resize(int scale) { BufferedImage img = null; Image resizedImg = null; int width = (int) (this.width * (scale/100.0) + 0.5); int height = (int) (this.height * (scale/100.0) + 0.5); try { // read an image to BufferedImage for processing img = ImageIO.read(new File(this.inFile)); // set buffer of image data // create a new BufferedImage for drawing resizedImg = img.getScaledInstance(width, height, Image.SCALE_SMOOTH); } catch (IOException e) { return; } try { ImageIO.write(convertToBufferedImage(resizedImg), this.ext, new File(resizedFile)); } catch (IOException e) { return; } this.inFile = this.resizedFile; // use scaled file vs original file in Class this.setStats(); } // convert every pixel to an ascii character (ratio does not seem correct) public void convertToAscii() { BufferedImage img = null; PrintWriter asciiPrt = null; FileWriter asciiWrt = null; try { File file = new File(this.asciiFile); Files.deleteIfExists(file.toPath()); } catch (IOException e) { System.out.println(&quot;Delete File error: &quot; + e); } try { asciiPrt = new PrintWriter(asciiWrt = new FileWriter(this.asciiFile, true)); } catch (IOException e) { System.out.println(&quot;ASCII out file create error: &quot; + e); } try { img = ImageIO.read(new File(this.inFile)); } catch (IOException e) { } for (int y = 0; y &lt; img.getHeight(); y+=2) { for (int x = 0; x &lt; img.getWidth(); x++) { Color col = new Color(img.getRGB(x, y)); double pixVal = (col.getRed() + col.getBlue() + col.getGreen())/3; try { asciiPrt.print(asciiChar(pixVal)); asciiPrt.flush(); asciiWrt.flush(); } catch (Exception ex) { } } try { asciiPrt.println(&quot;&quot;); asciiPrt.flush(); asciiWrt.flush(); } catch (Exception ex) { } } } // conversion table, there may be better out there ie https://www.billmongan.com/Ursinus-CS173-Fall2020/Labs/ASCIIArt public String asciiChar(double g) { String str = &quot; &quot;; if (g &gt;= 240) { str = &quot; &quot;; } else if (g &gt;= 230) { str = &quot;`&quot;; } else if (g &gt;= 220) { str = &quot;.&quot;; } else if (g &gt;= 210) { str = &quot;&#39;&quot;; } else if (g &gt;= 200) { str = &quot;_&quot;; } else if (g &gt;= 190) { str = &quot;*&quot;; } else if (g &gt;= 180) { str = &quot;v&quot;; } else if (g &gt;= 170) { str = &quot;|&quot;; } else if (g &gt;= 160) { str = &quot;+&quot;; } else if (g &gt;= 150) { str = &quot;=&quot;; } else if (g &gt;= 140) { str = &quot;{&quot;; } else if (g &gt;= 120) { str = &quot;^&quot;; } else if (g &gt;= 110) { str = &quot;&amp;&quot;; } else if (g &gt;= 100) { str = &quot;I&quot;; } else if (g &gt;= 90) { str = &quot;%&quot;; } else if (g &gt;= 80) { str = &quot;$&quot;; } else if (g &gt;= 60) { str = &quot;0&quot;; } else if (g &gt;= 50) { str = &quot;9&quot;; } else if (g &gt;= 40) { str = &quot;8&quot;; } else if (g &gt;= 30){ str = &quot;#&quot;; } else { str = &quot;@&quot;; } return str; } // tester/driver public static void main(String[] args) throws IOException { Pics monaLisa = new Pics(&quot;MonaLisa&quot;, &quot;png&quot;); monaLisa.printStats(&quot;Original&quot;); monaLisa.resize(33); monaLisa.printStats(&quot;Scaled&quot;); monaLisa.convertToAscii(); Pics pumpkin = new Pics(&quot;pumpkin&quot;, &quot;png&quot;); pumpkin.printStats(&quot;Original&quot;); pumpkin.resize(33); pumpkin.printStats(&quot;Scaled&quot;); pumpkin.convertToAscii(); } } Pics.main(null); . Original: 499298 389x413 images/MonaLisa.png Scaled: 55625 128x136 images/tmp/MonaLisa.png Original: 39392 302x265 images/pumpkin.png Scaled: 10497 100x87 images/tmp/pumpkin.png . . Grayscale . import java.io.File; import java.io.IOException; import java.awt.image.BufferedImage; import javax.imageio.ImageIO; import java.awt.Color; public class Grayscale{ public static void main(String args[])throws IOException{ File f = new File(&quot;images/MonaLisa.png&quot;); BufferedImage img = ImageIO.read(f); int width = img.getWidth(); int height = img.getHeight(); for(int y = 0; y &lt; height; y++){ for(int x = 0; x &lt; width; x++){ int p = img.getRGB(x,y); int a = (p&gt;&gt;24)&amp;0xff; int r = (p&gt;&gt;16)&amp;0xff; int g = (p&gt;&gt;8)&amp;0xff; int b = p&amp;0xff; int avg = (r+g+b)/3; p = (avg&lt;&lt;24) | (avg&lt;&lt;16) | (avg&lt;&lt;8) | avg; img.setRGB(x, y, p); } } try{ f = new File(&quot;images/grayscale.png&quot;); ImageIO.write(img, &quot;png&quot;, f); System.out.println(&quot;success!&quot;); }catch(IOException e){ System.out.println(e); } } } Grayscale.main(null); . success! . . Blue Scale . import java.io.File; import java.io.IOException; import java.awt.image.BufferedImage; import javax.imageio.ImageIO; import java.awt.Color; public class Bluescale{ public static void main(String args[])throws IOException{ File f = new File(&quot;images/MonaLisa.png&quot;); BufferedImage img = ImageIO.read(f); //get image width and height int width = img.getWidth(); int height = img.getHeight(); //convert to grayscale for(int y = 0; y &lt; height; y++){ for(int x = 0; x &lt; width; x++){ int p = img.getRGB(x,y); int a = (p&gt;&gt;24)&amp;0xff; int r = (p&gt;&gt;16)&amp;0xff; int g = (p&gt;&gt;8)&amp;0xff; int b = p&amp;0xff; //calculate average int avg = (r+g+b)/3; //replace RGB value with avg p = (a&lt;&lt;24) | (0) | (0) | avg; img.setRGB(x, y, p); } } //write image try{ f = new File(&quot;images/bluescale.png&quot;); ImageIO.write(img, &quot;png&quot;, f); }catch(IOException e){ System.out.println(e); } }//main() ends here }//class ends here Bluescale.main(null); . . Redscale . import java.io.File; import java.io.IOException; import java.awt.image.BufferedImage; import javax.imageio.ImageIO; import java.awt.Color; public class Redscale{ public static void main(String args[])throws IOException{ File f = new File(&quot;images/MonaLisa.png&quot;); BufferedImage img = ImageIO.read(f); //get image width and height int width = img.getWidth(); int height = img.getHeight(); //convert to grayscale for(int y = 0; y &lt; height; y++){ for(int x = 0; x &lt; width; x++){ int p = img.getRGB(x,y); int a = (p&gt;&gt;24)&amp;0xff; int r = (p&gt;&gt;16)&amp;0xff; int g = (p&gt;&gt;8)&amp;0xff; int b = p&amp;0xff; //calculate average int avg = (r+g+b)/3; //replace RGB value with avg p = (a&lt;&lt;24) | avg&lt;&lt;16 | 0 | 0; img.setRGB(x, y, p); } } //write image try{ f = new File(&quot;images/redscale.png&quot;); ImageIO.write(img, &quot;png&quot;, f); }catch(IOException e){ System.out.println(e); } }//main() ends here }//class ends here Redscale.main(null); . . Kind of creepy! . Greenscale . import java.io.File; import java.io.IOException; import java.awt.image.BufferedImage; import javax.imageio.ImageIO; import java.awt.Color; public class Greenscale{ public static void main(String args[])throws IOException{ File f = new File(&quot;images/MonaLisa.png&quot;); BufferedImage img = ImageIO.read(f); //get image width and height int width = img.getWidth(); int height = img.getHeight(); //convert to grayscale for(int y = 0; y &lt; height; y++){ for(int x = 0; x &lt; width; x++){ int p = img.getRGB(x,y); int a = (p&gt;&gt;24)&amp;0xff; int r = (p&gt;&gt;16)&amp;0xff; int g = (p&gt;&gt;8)&amp;0xff; int b = p&amp;0xff; //calculate average int avg = (r+g+b)/3; //replace RGB value with avg p = (a&lt;&lt;24) | 0 | avg&lt;&lt;8 | 0; img.setRGB(x, y, p); } } //write image try{ f = new File(&quot;images/greenscale.png&quot;); ImageIO.write(img, &quot;png&quot;, f); }catch(IOException e){ System.out.println(e); } }//main() ends here }//class ends here Greenscale.main(null); . .",
            "url": "https://mnarayan1.github.io/csa-fastpages/jupyter/2022/09/30/images.html",
            "relUrl": "/jupyter/2022/09/30/images.html",
            "date": " • Sep 30, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Program Design",
            "content": "Brain Write . Commerce site for Del Norte students to sell their belongings/services ex. Used TINspire calculator, tutoring, clothes | . | Helps students earn money, save money on common items, and get help (tutoring)! | Reselling products is environmentally friendly! | Not directly associated with the school so we don&#39;t get sued! | . Design . Our team made a Figma with a very rough overview of what we want our final project to look like. We will update this with behavior, interaction, and data diagrams as we solidify our ideas. . Test Frontend/Backend Code . Sample code to create a row in a table for each listing. We don&#39;t want a table in our final product, but this is a good start for iterating over product listings. . // create object for listing function Listing(name, price, contactInfo) { this.name = name; this.price = price; this.contactInfo = contactInfo; } const data = [ new Listing(&quot;TINspire Calculator&quot;, &quot;70.00&quot;, &quot;test@test.com&quot;), new Listing(&quot;New PE Lock&quot;, &quot;5.00&quot;, &quot;1-800-YOUR-NUMBER&quot;), new Listing(&quot;AP Bio Prep Book&quot;, &quot;15,00&quot;, &quot;test@test.com&quot;) ] // return table row for each listing that can be added to html for (const row of data) { const name = row.name; const price = row.price; const contactInfo = row.contactInfo; console.log(` &lt;tr&gt; &lt;td&gt;${name}&lt;/td&gt; &lt;td&gt;${price}&lt;/td&gt; &lt;td&gt;${contactInfo}&lt;/td&gt; &lt;/tr&gt; `) } . &lt;tr&gt; &lt;td&gt;TINspire Calculator&lt;/td&gt; &lt;td&gt;70.00&lt;/td&gt; &lt;td&gt;test@test.com&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;New PE Lock&lt;/td&gt; &lt;td&gt;5.00&lt;/td&gt; &lt;td&gt;1-800-YOUR-NUMBER&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;AP Bio Prep Book&lt;/td&gt; &lt;td&gt;15,00&lt;/td&gt; &lt;td&gt;test@test.com&lt;/td&gt; &lt;/tr&gt; .",
            "url": "https://mnarayan1.github.io/csa-fastpages/jupyter/2022/09/25/program-design.html",
            "relUrl": "/jupyter/2022/09/25/program-design.html",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "JavaScript",
            "content": "Basic Syntax . // define variable const hello = &quot;Hello World!&quot;; //console.log to print output to console (in dev tools) console.log(hello); // defining a function function printMessage(message) { console.log(message); } // calling a function printMessage(&quot;Hello from a function!&quot;); . Hello World! Hello from a function! . Creating objects . // function to create data for person (from https://nighthawkcoders.github.io/APCSA//techtalk/javascript) function Person(name, role) { this.name = name; this.role = role; } const womenInStem = [ new Person(&quot;Mads&quot;, &quot;deployment&quot;), new Person(&quot;Meens&quot;, &quot;backend&quot;), new Person(&quot;Prans&quot;, &quot;scrum master&quot;), new Person(&quot;Shish&quot;, &quot;frontend&quot;) ] console.log(womenInStem) . [ Person { name: &#39;Mads&#39;, role: &#39;deployment&#39; }, Person { name: &#39;Meens&#39;, role: &#39;backend&#39; }, Person { name: &#39;Prans&#39;, role: &#39;scrum master&#39; }, Person { name: &#39;Shish&#39;, role: &#39;frontend&#39; } ] . Project Prototype . Create HTML page for basic commerce site. . // create object for listing function Listing(name, price, contactInfo) { this.name = name; this.price = price; this.contactInfo = contactInfo; } const data = [ new Listing(&quot;TINspire Calculator&quot;, &quot;70.00&quot;, &quot;test@test.com&quot;), new Listing(&quot;New PE Lock&quot;, &quot;5.00&quot;, &quot;1-800-YOUR-NUMBER&quot;), new Listing(&quot;AP Bio Prep Book&quot;, &quot;15,00&quot;, &quot;test@test.com&quot;) ] // return table row for each listing that can be added to html for (const row of data) { const name = row.name; const price = row.price; const contactInfo = row.contactInfo; console.log(` &lt;tr&gt; &lt;td&gt;${name}&lt;/td&gt; &lt;td&gt;${price}&lt;/td&gt; &lt;td&gt;${contactInfo}&lt;/td&gt; &lt;/tr&gt; `) } . &lt;tr&gt; &lt;td&gt;TINspire Calculator&lt;/td&gt; &lt;td&gt;70.00&lt;/td&gt; &lt;td&gt;test@test.com&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;New PE Lock&lt;/td&gt; &lt;td&gt;5.00&lt;/td&gt; &lt;td&gt;1-800-YOUR-NUMBER&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;AP Bio Prep Book&lt;/td&gt; &lt;td&gt;15,00&lt;/td&gt; &lt;td&gt;test@test.com&lt;/td&gt; &lt;/tr&gt; .",
            "url": "https://mnarayan1.github.io/csa-fastpages/jupyter/2022/09/25/javascript.html",
            "relUrl": "/jupyter/2022/09/25/javascript.html",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Fibonacci",
            "content": "For Loops with extends . // for loops class Fibonacci { ArrayList&lt;Integer&gt; sequence; int steps; public Fibonacci() { sequence = new ArrayList&lt;Integer&gt;(); sequence.add(0); sequence.add(1); this.getInput(); this.generateSequence(); } public void getInput() { Scanner input = new Scanner(System.in); System.out.println(&quot;How many terms do you want to generate? (greater than 2)&quot;); steps = input.nextInt(); System.out.println(steps); } public void generateSequence() { for(int i = 2; i&lt;steps; i++) { sequence.add(sequence.get(i-2) + sequence.get(i-1)); } System.out.println(sequence); } public static void main(String[] args) { new Fibonacci(); } } Fibonacci.main(null); // for loop with extends class Fibo extends Fibonacci { ArrayList&lt;Integer&gt; sequence; int steps; public Fibo() { // inherits properties of for loop, so we don&#39;t have to rewrite functions super(); } public static void main(String[] args) { System.out.println(&quot; nUsing extends:&quot;); new Fibo(); } } Fibo.main(null); . How many terms do you want to generate? (greater than 2) 8 [0, 1, 1, 2, 3, 5, 8, 13] Using extends: How many terms do you want to generate? (greater than 2) 8 [0, 1, 1, 2, 3, 5, 8, 13] . While Loop . class Fibonacci { ArrayList&lt;Integer&gt; sequence; int steps; public Fibonacci() { sequence = new ArrayList&lt;Integer&gt;(); sequence.add(0); sequence.add(1); this.getInput(); this.generateSequence(); } public void getInput() { Scanner input = new Scanner(System.in); System.out.println(&quot;How many terms do you want to generate? (greater than 2)&quot;); steps = input.nextInt(); System.out.println(steps); } public void generateSequence() { int i = 2; while(i&lt;steps) { sequence.add(sequence.get(i-2) + sequence.get(i-1)); i++; } System.out.println(sequence); } public static void main(String[] args) { new Fibonacci(); } } Fibonacci.main(null); . How many terms do you want to generate? (greater than 2) 8 [0, 1, 1, 2, 3, 5, 8, 13] . Recursion . class Fibonacci { ArrayList&lt;Integer&gt; sequence; int steps; public Fibonacci() { sequence = new ArrayList&lt;Integer&gt;(); sequence.add(0); sequence.add(1); this.getInput(); this.generateSequence(); } public void getInput() { Scanner input = new Scanner(System.in); System.out.println(&quot;How many terms do you want to generate? (greater than 2)&quot;); steps = input.nextInt(); System.out.println(steps); } // recursive method to generate term i of fibonacci sequence public int generateTerm(int i) { if(i&lt;=1) { return i; } return generateTerm(i-2) + generateTerm(i-1); } // adds terms of fibonacci to sequence public void generateSequence() { for(int i = 2; i&lt;steps; i++) { sequence.add(this.generateTerm(i)); } System.out.println(sequence); } public static void main(String[] args) { new Fibonacci(); } } Fibonacci.main(null); . How many terms do you want to generate? (greater than 2) 8 [0, 1, 1, 2, 3, 5, 8, 13] .",
            "url": "https://mnarayan1.github.io/csa-fastpages/jupyter/2022/09/21/fibonacci.html",
            "relUrl": "/jupyter/2022/09/21/fibonacci.html",
            "date": " • Sep 21, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "Team Methods and Control Structures Lesson",
            "content": "Control Structures . if, else if, and else . A single if statement only takes one condition, but what if we wanted to specify more conditions? We can add else if and else statements to accomplish this. . Structure: . if(condition) { // code to execute when condition is met } else if (condition 2) { // code to execute when condition is false but condition 2 is true } else { // code to execute when condition and condition 2 are false } . switch statements . switch statements check the value of a condition and run code blocks for different scenarios. . Structure: . switch(condition) { case value1: // code break; case value2: // code break; default; // code that should run for unspecified case break; } . switch statements are especially useful for creating menus. . Methods . Method: A piece of code that runs only when it&#39;s called. It can perform specific actions on an object. . // example myPainter.turnRight(); . In this example, the method turnRight is called on the object myPainter. It will perform a set of actions that will allow the painter to turn right. This makes our code more readable and reusable. . public class Person { // defining the method sleep, which can be called on future instances of Person public static void sleep () { // will print out zzzzzzzz when sleep is called on Person System.out.println(&quot;zzzzzzzz&quot;); } public static void main(String[] args) { Person myPerson = new Person(); myPerson.sleep(); } } Person.main(null); . zzzzzzzz . Hacks . Make a class with the following . Complete the Person class with the following methods A weather method telling the person to put on a jacket if it&#39;s raining outside | Modify the sleep method to made the person sleep at certain hours | . | .",
            "url": "https://mnarayan1.github.io/csa-fastpages/jupyter/2022/09/19/methods-and-control-structures-lesson.html",
            "relUrl": "/jupyter/2022/09/19/methods-and-control-structures-lesson.html",
            "date": " • Sep 19, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "Iteration Mini Lab",
            "content": "Imperative Programming . The positions of the boat are stored in a two-dimensional array, which is iterated over when the boats are displayed. . class BoatLoop { String [][] boats; String origin; String destination; String ocean; public BoatLoop() { boats = new String[][]{ { &quot; __|_|__|_|__&quot;, &quot; _|____________|__&quot;, &quot; |o o o o o o o o / &quot; , }, { &quot; __|_|__|_|__&quot;, &quot; _|____________|__&quot;, &quot; |o o o o o o o o / &quot; , }, { &quot; __|_|__|_|__&quot;, &quot; _|____________|__&quot;, &quot; |o o o o o o o o / &quot; , }, { &quot; __|_|__|_|__&quot;, &quot; _|____________|__&quot;, &quot; |o o o o o o o o / &quot; , }, { &quot; __|_|__|_|__&quot;, &quot; _|____________|__&quot;, &quot; |o o o o o o o o / &quot; , } }; this.getCities(); this.printBoats(); } public void getCities() { Scanner input = new Scanner(System.in); System.out.println(&quot;Where are you starting from?&quot;); origin = input.nextLine(); System.out.println(origin); System.out.println(&quot; nWhere do you want to sail to?&quot;); destination = input.nextLine(); System.out.println(destination); ocean = String.format(&quot;%s~&#39;`~&#39;`~&#39;`~&#39;`~&#39;`~&#39;`~&#39;`~~&#39;~&#39;`~&#39;`~&#39;`~&#39;`~&#39;`~&#39;`~&#39;`~~&#39;~&#39;`~&#39;`~&#39;`~&#39;`~&#39;`~&#39;`~&#39;`~&#39;~&#39;`~&#39;`~&#39;`~&#39;`~&#39;`~&#39;`~&#39;`~&#39;`~&#39;`~&#39;`~&#39;`--%s&quot;, this.origin, this.destination); } public void printBoats() { for(int i = 0; i &lt; boats.length; i++) { for(String line: boats[i]) { System.out.println(line); } System.out.println(this.ocean); } System.out.println(String.format(&quot;Yay! You reached %s&quot;, destination)); } public static void main(String[] args) { new BoatLoop(); } } BoatLoop.main(null); . Where are you starting from? LA Where do you want to sail to? Hawaii __|_|__|_|__ _|____________|__ |o o o o o o o o / LA~&#39;`~&#39;`~&#39;`~&#39;`~&#39;`~&#39;`~&#39;`~~&#39;~&#39;`~&#39;`~&#39;`~&#39;`~&#39;`~&#39;`~&#39;`~~&#39;~&#39;`~&#39;`~&#39;`~&#39;`~&#39;`~&#39;`~&#39;`~&#39;~&#39;`~&#39;`~&#39;`~&#39;`~&#39;`~&#39;`~&#39;`~&#39;`~&#39;`~&#39;`~&#39;`--Hawaii __|_|__|_|__ _|____________|__ |o o o o o o o o / LA~&#39;`~&#39;`~&#39;`~&#39;`~&#39;`~&#39;`~&#39;`~~&#39;~&#39;`~&#39;`~&#39;`~&#39;`~&#39;`~&#39;`~&#39;`~~&#39;~&#39;`~&#39;`~&#39;`~&#39;`~&#39;`~&#39;`~&#39;`~&#39;~&#39;`~&#39;`~&#39;`~&#39;`~&#39;`~&#39;`~&#39;`~&#39;`~&#39;`~&#39;`~&#39;`--Hawaii __|_|__|_|__ _|____________|__ |o o o o o o o o / LA~&#39;`~&#39;`~&#39;`~&#39;`~&#39;`~&#39;`~&#39;`~~&#39;~&#39;`~&#39;`~&#39;`~&#39;`~&#39;`~&#39;`~&#39;`~~&#39;~&#39;`~&#39;`~&#39;`~&#39;`~&#39;`~&#39;`~&#39;`~&#39;~&#39;`~&#39;`~&#39;`~&#39;`~&#39;`~&#39;`~&#39;`~&#39;`~&#39;`~&#39;`~&#39;`--Hawaii __|_|__|_|__ _|____________|__ |o o o o o o o o / LA~&#39;`~&#39;`~&#39;`~&#39;`~&#39;`~&#39;`~&#39;`~~&#39;~&#39;`~&#39;`~&#39;`~&#39;`~&#39;`~&#39;`~&#39;`~~&#39;~&#39;`~&#39;`~&#39;`~&#39;`~&#39;`~&#39;`~&#39;`~&#39;~&#39;`~&#39;`~&#39;`~&#39;`~&#39;`~&#39;`~&#39;`~&#39;`~&#39;`~&#39;`~&#39;`--Hawaii __|_|__|_|__ _|____________|__ |o o o o o o o o / LA~&#39;`~&#39;`~&#39;`~&#39;`~&#39;`~&#39;`~&#39;`~~&#39;~&#39;`~&#39;`~&#39;`~&#39;`~&#39;`~&#39;`~&#39;`~~&#39;~&#39;`~&#39;`~&#39;`~&#39;`~&#39;`~&#39;`~&#39;`~&#39;~&#39;`~&#39;`~&#39;`~&#39;`~&#39;`~&#39;`~&#39;`~&#39;`~&#39;`~&#39;`~&#39;`--Hawaii Yay! You reached Hawaii .",
            "url": "https://mnarayan1.github.io/csa-fastpages/jupyter/2022/09/13/iteration.html",
            "relUrl": "/jupyter/2022/09/13/iteration.html",
            "date": " • Sep 13, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "Methods and Control Structures FRQ",
            "content": "2017, Question 1 . The full FRQ can be found here . a) Write the constructor for the Digits class. . Constructor: initilizes/fills digitList with the digits from num | digitList: elements are Integer objects representing single digits, and appear in the same order as the digits in num. | . b) Write the Digits method isStrictlyIncreasing. . returns true if elements of digitList are strictly increasing in order | returns false otherwise | . public class Digits { /** The list of digits from the number used to construct this object. * The digits appear in the list in the same order in which they appear in the original number. */ private ArrayList&lt;Integer&gt; digitList; /** Constructs a Digits object that represents num. * Precondition: num &gt;= 0 */ public Digits(int num) { /* to be implemented in part (a) */ } /** Returns true if the digits in this Digits object are in strictly increasing order; * false otherwise. */ public boolean isStrictlyIncreasing() { /* to be implemented in part (b) */ } } . My Solution . Part a: Convert the original int to a String, then iterate through each char of the String to create an ArrayList of digits. The elements of the final array were converted back into ints. | Part b: Iterate through each element of digitList to check if the current element is greater than the previous element. | . public class Digits { private ArrayList&lt;Integer&gt; digitList; // part a - constructor to initialize and fill digitList public Digits(int num) { this.digitList = new ArrayList&lt;Integer&gt;(); String numberString = String.valueOf(num); char[] chars = numberString.toCharArray(); for(char ch: chars) { this.digitList.add(Character.getNumericValue(ch)); } // to test that the constructor is working System.out.println(this.digitList); } // part b - check if digits are strictly increasing public boolean isStrictlyIncreasing() { boolean checkIncreasing = true; for(int i = 1; i &lt; this.digitList.size(); i++) { if(this.digitList.get(i) &gt; this.digitList.get(i-1)) { continue; } else { checkIncreasing = false; break; } } return checkIncreasing; } public static void main(String[] args) { // testing - should return true for isStrictlyIncreasing Digits newDigit = new Digits(6789); if(newDigit.isStrictlyIncreasing() == false) { System.out.println(&quot;not strictly increasing&quot;); } else { System.out.println(&quot;strictly increasing&quot;); } } } Digits.main(null); . [6, 7, 8, 9] strictly increasing .",
            "url": "https://mnarayan1.github.io/csa-fastpages/jupyter/2022/09/12/methods-and-control-frq.html",
            "relUrl": "/jupyter/2022/09/12/methods-and-control-frq.html",
            "date": " • Sep 12, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "Focus and Habits",
            "content": "Here are my takeaways from Proefessor Laurie Santos&#39;s lecture on Psychology and the Good Life. . GI Joe Fallacy: knowing is not half the battle, and knowledge must be acted upon the journey to happiness requires a long term commitment, not just knowledge | . | Our mind fools us that a higher salary will make us happier, but research shows us that this is not the truth. happiness increases after you make above the poverty line, but after $75,000, there is no significant increase in happiness | people who seek out material goods are not happy | . | Very happy people spend more time making social connections, and spend less time alone | Happy people spend their time and money on others. | Focus on the positives in my life instead of the negatives | Make time for staying healthy (sleep, exercise, food) | Be in the present, don&#39;t mind-wander! | Gratitude List . The opportunities I have | My education | Access to good infrastructure | . Goals . Spend more time with my friends and family | Make time for gratitude every day | Tell people I am grateful for them | Pay attention to my surroundings and stay in the moment | .",
            "url": "https://mnarayan1.github.io/csa-fastpages/jupyter/2022/09/11/focus.html",
            "relUrl": "/jupyter/2022/09/11/focus.html",
            "date": " • Sep 11, 2022"
        }
        
    
  
    
        ,"post8": {
            "title": "Boolean Expressions and Control Structures",
            "content": "Boolean: a primitive data type that is either true or false . boolean computersAreCool = true; boolean paperIsCool = false; . Boolean Expression: an expression that evaluates as either true or false . 1==1 // is true, because 1 will always be equal to 1 a &lt; 1 // will sometimes be true, because not all values of a will be less than 1 “paper” == “good” // is false, because the string “paper” is not equal to the string “good” . We can use boolean expressions in control structures to run programs when certain conditions are met. . if Statements . if statements will run a code block if a particular condition is true. . Structure: . if(condition) { // code will run when condition is true } . // an if statement will run when the condition is true if(true) { System.out.println(&quot;this will print&quot;); } if(1==1) { System.out.println(&quot;this will print&quot;); } // an if statement will not run if the condition is false if(false) { System.out.println(&quot;this will not print&quot;); } if(&quot;paper&quot; == &quot;good&quot;) { System.out.println(&quot;this will not print&quot;); } . this will print this will print . if, else if, and else . A single if statement only takes one condition, but what if we wanted to specify more conditions? We can add else if and else statements to accomplish this. . Structure: . if(condition) { // code to execute when condition is met } else if (condition 2) { // code to execute when condition is false but condition 2 is true } else { // code to execute when condition and condition 2 are false } . int time = 8; // 24-hour clock, 8 AM if(time &lt; 8 ) { // will run if it is before 8 AM System.out.println(&quot;School will start in a few hours!&quot;); } else if ( time &gt;= 8 &amp;&amp; time &lt; 16) { // will run betwee 8 AM and 4 PM System.out.println(&quot;You should be in school!&quot;); } else { // will run from 4 PM to 12 AM System.out.println(&quot;You are at home!&quot;); } . You should be in school! . switch statements . switch statements check the value of a condition and run code blocks for different scenarios. . Structure: . switch(condition) { case value1: // code break; case value2: // code break; default; // code that should run for unspecified case break; } . switch statements are especially useful for creating menus. . int menuOption = 0; // print menu for user to see options they can choose from System.out.println(&quot;- Menu Options &quot;); System.out.println(&quot;0: print hello world&quot;); System.out.println(&quot;1: print goodbye world n&quot;); switch(menuOption) { // check the value of menuOption case 0: // what to run when menuOption=0 System.out.println(&quot;hello world&quot;); break; case 1: // what to run when menuOption=1 System.out.println(&quot;goodbye world&quot;); break; default: // default code to run System.out.println(&quot;menu options not found!&quot;); break; } . - Menu Options 0: print hello world 1: print goodbye world hello world . The two programs below accomplish the same thing: given an object, the program will rate it as &quot;cool&quot; or &quot;uncool&quot;. The first uses if-else if-else, and the other uses switch-case. . if statements: . String object = &quot;computer&quot;; // object is &quot;computer&quot; // the if statement will print different statements depending on the value of object if(object == &quot;computer&quot;) { System.out.println(&quot;cool&quot;); } else if (object == &quot;keyboard&quot;) { System.out.println(&quot;cool&quot;); } else if (object == &quot;phone&quot;) { System.out.println(&quot;cool&quot;); } else if (object == &quot;paper&quot;) { System.out.println(&quot;uncool&quot;); } else if(object == &quot;pencil&quot;) { System.out.println(&quot;uncool&quot;); } else { System.out.println(&quot;object not found!&quot;); } // since object = &quot;computer&quot; , this program should print &quot;cool&quot; . cool . switch-case: . String object = &quot;computer&quot;; // object is &quot;computer&quot; // the switch statement will test different values of object and print a result depending on the value of object switch(object) { case &quot;computer&quot;: System.out.println(&quot;cool&quot;); break; case &quot;keyboard&quot;: System.out.println(&quot;cool&quot;); break; case &quot;phone&quot;: System.out.println(&quot;cool&quot;); break; case &quot;paper&quot;: System.out.println(&quot;uncool&quot;); break; case &quot;pencil&quot;: System.out.println(&quot;uncool&quot;); break; default: System.out.println(&quot;object not found!&quot;); break; } // since object = &quot;computer&quot;, this program should print &quot;cool&quot; . cool . DeMorgan&#39;s Law . DeMorgan&#39;s Laws show how to deal with the negation of a conditional statements. When ! is applied: . true will become false | false will become true | and (&amp;&amp;) will become or (||) | . Examples: . Expression Applying DeMorgan&#39;s Law result . !true | opposite of true --&gt; false | false | . !(true || false) | false &amp;&amp; true | false | . !((false &amp;&amp; true) || (!false &amp;&amp; true)) | (true || false) &amp;&amp; (false || true) --&gt; true &amp;&amp; true | true | . // DeMorgan&#39;s law practice if(!true) { System.out.println(&quot;!true = false, so this statement should not print&quot;); } if(!((true &amp;&amp; false) || (false &amp;&amp; false))) { // using DeMorgan&#39;s law, this statement is equal to (false || true) &amp;&amp; (true || true), which is true System.out.println(&quot;!((true &amp;&amp; false) || (false &amp;&amp; false)) is true, so this should print!&quot;); } if(!(false || true)) { // using DeMorgan&#39;s law, this statement is equal to true &amp;&amp; false, which is false System.out.println(&quot;this should not print!&quot;); } . !((true &amp;&amp; false) || (false &amp;&amp; false)) is true, so this should print! .",
            "url": "https://mnarayan1.github.io/csa-fastpages/jupyter/2022/09/11/control-structures.html",
            "relUrl": "/jupyter/2022/09/11/control-structures.html",
            "date": " • Sep 11, 2022"
        }
        
    
  
    
        ,"post9": {
            "title": "Team Objects Hacks",
            "content": "// imports allow you to use code already written by others. It is good to explore and learn libraries. The names around the dots often give you a hint to the originator of the code. import java.util.Scanner; //library for user input import java.lang.Math; //library for random numbers public class Menu { // Instance Variables public final String DEFAULT = &quot; u001B[0m&quot;; // Default Terminal Color public final String[][] COLORS = { // 2D Array of ANSI Terminal Colors {&quot;Default&quot;,DEFAULT}, {&quot;Red&quot;, &quot; u001B[31m&quot;}, {&quot;Green&quot;, &quot; u001B[32m&quot;}, {&quot;Yellow&quot;, &quot; u001B[33m&quot;}, {&quot;Blue&quot;, &quot; u001B[34m&quot;}, {&quot;Purple&quot;, &quot; u001B[35m&quot;}, {&quot;Cyan&quot;, &quot; u001B[36m&quot;}, {&quot;White&quot;, &quot; u001B[37m&quot;}, }; // 2D column location for data public final int NAME = 0; public final int ANSI = 1; // ANSI is the &quot;standard&quot; for terminal codes // Constructor on this Object takes control of menu events and actions public Menu() { Scanner sc = new Scanner(System.in); // using Java Scanner Object this.print(); // print Menu boolean quit = false; while (!quit) { try { // scan for Input int choice = sc.nextInt(); // using method from Java Scanner Object System.out.print(&quot;&quot; + choice + &quot;: &quot;); quit = this.action(choice); // take action } catch (Exception e) { sc.nextLine(); // error: clear buffer System.out.println(e + &quot;: Not a number, try again.&quot;); } } sc.close(); } // Print the menu options to Terminal private void print() { //System.out.println commands below is used to present a Menu to the user. System.out.println(&quot;- n&quot;); System.out.println(&quot;Choose from these choices&quot;); System.out.println(&quot;- n&quot;); System.out.println(&quot;1 - Say Hello&quot;); System.out.println(&quot;2 - Output colors&quot;); System.out.println(&quot;3 - Loading in color&quot;); System.out.println(&quot;4 - Temp Converter (Shraddha)&quot;); System.out.println(&quot;5 - GPA Calculator (Meena)&quot;); System.out.println(&quot;6 - Simple Calculator(Pranavi)&quot;); System.out.println(&quot;7 - Statistics Calculator (Madhumita)&quot;); System.out.println(&quot;0 - Quit&quot;); System.out.println(&quot;- n&quot;); } // Private method to perform action and return true if action is to quit/exit private boolean action(int selection) { boolean quit = false; switch (selection) { // Switch or Switch/Case is Control Flow statement and is used to evaluate the user selection case 0: System.out.print(&quot;Goodbye, World!&quot;); quit = true; break; case 1: System.out.print(&quot;Hello, World!&quot;); break; case 2: for(int i = 0; i &lt; COLORS.length; i++) // loop through COLORS array System.out.print(COLORS[i][ANSI] + COLORS[i][NAME]); break; case 3: System.out.print(&quot;Loading...&quot;); for (int i = 0; i &lt; 20; i++) { // fixed length loading bar int random = (int) (Math.random() * COLORS.length); // random logic try { Thread.sleep(100); // delay for loading } catch (Exception e) { System.out.println(e); } System.out.print(COLORS[random][ANSI] + &quot;#&quot;); } break; case 4: Scanner keyboard = new Scanner(System.in); System.out.println(&quot;Enter in 1 to convert from Fahrenheit to Celsius or 2 to convert from Celsius to Fahrenheit.&quot;); int conversionDeterminer = keyboard.nextInt(); System.out.println(&quot;Please enter a temperature.&quot;); int originalTemp = keyboard.nextInt(); double convertedTemp; if(conversionDeterminer == 1) { convertedTemp = (originalTemp - 32) * (5.0/9); System.out.println(convertedTemp); } else if(conversionDeterminer == 2) { convertedTemp = originalTemp * (9.0/5) + 32; System.out.println(convertedTemp); } else { System.out.println(&quot;Sorry, that input is not valid. Please try running the program again.&quot;); } break; case 5: System.out.println(&quot;GPA Calculator&quot;); System.out.println(&quot;Code by Meena Annamalai&quot;); int count = -1; Scanner input; boolean exitProgram = false; input = new Scanner(System.in); System.out.print(&quot;How many course would you like to enter? &quot;); int numCourses = input.nextInt(); System.out.println(numCourses); input.close(); int[] gradePoints = new int[numCourses]; int[] creditHours = new int[numCourses]; for (int i = 0; i &lt; numCourses; i++) { // get course input = new Scanner(System.in); System.out.print(&quot; nEnter a course, type 0 to exit: &quot;); /** Wrapper class object string is used here since the user enters the course name **/ String course = input.nextLine(); System.out.println(course); input.close(); if (course.equals(&quot;0&quot;)) { exitProgram = true; System.out.println(&quot;Bye!&quot;); break; } //compound assignment operator used here - the result is that the count is increased by 1 each time the loop runs count += 1; // get credits input = new Scanner(System.in); System.out.print(&quot;Enter the number of credits for that course: &quot;); /** primitive data type: an integer is used here since the number of credits will later be used for calculations so a string shouldn&#39;t be used and since the credit number will always be a whole number, an integer data type can be used **/ int credits = input.nextInt(); System.out.println(credits); input.close(); // get letter grade input = new Scanner(System.in); System.out.print(&quot;Enter the letter grade you got: &quot;); /** Wrapper class object string is used here since the user enters the letter grade they got which will then be matched with the corresponding point value with the below switch statement **/ String letterGrade = input.nextLine(); System.out.println(letterGrade); input.close(); int pointValue = 0; //convert letter grade to gpa switch (letterGrade) { case &quot;A&quot;: pointValue = 4; break; case &quot;B&quot;: pointValue = 3; break; case &quot;C&quot;: pointValue = 2; break; case &quot;D&quot;: pointValue = 1; break; case &quot;F&quot;: pointValue = 0; break; } creditHours[count] = credits; gradePoints[count] = pointValue * credits; } int totalGradePoints = 0; for (int i = 0; i &lt; gradePoints.length; i++) { totalGradePoints += gradePoints[i]; } int totalAttemptedCredits = 0; for (int i = 0; i &lt; creditHours.length; i++) { totalAttemptedCredits += creditHours[i]; } //here the Primitive data type boolean is used since I only want the final gpa to be shown if the user doesn&#39;t exit the program if (exitProgram == false) { //here the primitive data type double is used since the the total grade pts divided by the total attempted credits will not always be a whole number //casting is also used for this reason as both variables were originally integers double gpa = (double) totalGradePoints / (double) totalAttemptedCredits; System.out.println(&quot;Your GPA is: &quot; + String.valueOf(gpa)); System.out.println(&quot;Bye! Thank you for using GPA Calculator&quot;); break; } //ScanPrimitives.main(null); break; case 6: System.out.println(&quot;Simple Calculator&quot;); System.out.println(&quot;Code by Pranavi Inukurti&quot;); Scanner Scan = new Scanner(System.in); System.out.println(&quot; n Please enter two numbers&quot;); int xe; int xo; System.out.print(&quot; n First number: &quot;); xe = Scan.nextInt(); System.out.print(&quot; n Second number: &quot;); xo = Scan.nextInt(); System.out.println(&quot; n Select between (*,/,+,-) n Type out the character in a single letter: &quot;); String Operation = Scan.next(); String EO = &quot;You have selected &quot;; switch (Operation) { case &quot;*&quot;: System.out.println(EO + &quot;* n Your Result: &quot;+( xe * xo )); break; case &quot;/&quot;: System.out.println(EO + &quot;/ n Your Result: &quot;+ ( xe / xo )); break; case &quot;+&quot;: System.out.println(EO + &quot;+ n Your Result: &quot;+ ( xe + xo ));break; case &quot;-&quot;: System.out.println(EO + &quot;- n Your Result: &quot;+( xe - xo )); break; default: //Prints error message from console System.out.print(&quot;Unexpected choice, try again.&quot;); //Close Scan.close(); System.out.println(&quot; Closing Application &quot;); } break; case 7: ArrayList&lt;Double&gt; data = new ArrayList&lt;&gt;(); Scanner statisticsInput = new Scanner(System.in); System.out.print(&quot;Enter an numerical datapoint, type a non-numerical value to exit: n&quot;); while(true) { try { double userInput = statisticsInput.nextDouble(); System.out.println(userInput); data.add(userInput); } catch (Exception e) { statisticsInput.close(); break; } } //find mean double total = 0; for (double num : data) { total += num; } double mean = total/data.size(); //find standard deviation double standardDeviation = 0; for (double num : data) { standardDeviation += Math.pow(num - mean, 2); } standardDeviation = Math.sqrt(standardDeviation/(data.size() - 1)); //find min double min = data.get(0); for (double num : data) { if (num &lt; min) { min = num; } } //find max double max = data.get(0); for (double num : data) { if (num &gt; max) { max = num; } } System.out.println(&quot;Mean: &quot; + mean); System.out.println(&quot;Max: &quot; + max); System.out.println(&quot;Min: &quot; + min); System.out.println(&quot;Standard Deviation: &quot; + standardDeviation); } System.out.println(DEFAULT); // make sure to reset color and provide new line return quit; } // Static driver/tester method static public void main(String[] args) { new Menu(); // starting Menu object } } Menu.main(null); . - Choose from these choices - 1 - Say Hello 2 - Output colors 3 - Loading in color 4 - Temp Converter (Shraddha) 5 - GPA Calculator (Meena) 6 - Simple Calculator(Pranavi) 7 - Statistics Calculator (Madhumita) 0 - Quit - 0: Goodbye, World! .",
            "url": "https://mnarayan1.github.io/csa-fastpages/jupyter/2022/09/05/team-objects-hacks.html",
            "relUrl": "/jupyter/2022/09/05/team-objects-hacks.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post10": {
            "title": "Objects Hacks",
            "content": "Basics physics calculator using class, methods, console meny, and Math operations. . More notes on Objects can be found here . . import java.util.Scanner; import java.lang.Math; public class OneDimensionalPhysics { double position; double velocity; double acceleration; double time; public OneDimensionalPhysics() { this.position = 0; this.velocity = 0; this.acceleration = 0; this.time = 0; this.enterData(); this.printMenu(); boolean useMenu = true; } private void printMenu() { System.out.println(&quot;- Choose an Option -&quot;); System.out.println(&quot;0. Calculate final velocity&quot;); System.out.println(&quot;1. Calculate final position&quot;); System.out.println(&quot;2. Calculate displacement&quot;); System.out.println(&quot;3. Exit&quot;); } public void enterData() { Scanner input = new Scanner(System.in); System.out.println(&quot;Enter position, in meters: &quot;); this.position = input.nextDouble(); System.out.println(this.position); System.out.println(&quot;Enter velocity, in meters per second: &quot;); this.velocity = input.nextDouble(); System.out.println(this.velocity); System.out.println(&quot;Enter acceleration, in meters per second squared: &quot;); this.acceleration = input.nextDouble(); System.out.println(this.acceleration); System.out.println(&quot;Enter time, in second: &quot;); this.time = input.nextDouble(); System.out.println(this.time); } public double calculateFinalVelocity() { double finalVelocity = this.velocity + (this.acceleration * this.time); return finalVelocity; } public double calculateFinalPosition() { double finalPosition = this.position + (this.velocity * this.time) + (0.5 * this.acceleration * Math.pow(this.time, 2)); return finalPosition; } public static void main(String[] args) { // instance of class OneDimensionalPhysics newData = new OneDimensionalPhysics(); // create console menu Scanner menuInput = new Scanner(System.in); boolean useMenu = true; while(useMenu) { System.out.println(&quot;Menu option: &quot;); int menuChoice = menuInput.nextInt(); System.out.println(menuChoice); switch(menuChoice) { case 0: // calling method on object System.out.println(&quot; Final Velocity: &quot; + newData.calculateFinalVelocity() + &quot; &quot;); break; case 1: System.out.println(&quot; Final Position: &quot; + newData.calculateFinalPosition() + &quot; &quot;); break; case 2: System.out.println(&quot; Displacement: &quot; + (newData.calculateFinalPosition() - newData.position) + &quot; &quot;); break; case 3: System.out.println(&quot;Goodbye!&quot;); useMenu = false; break; } } System.out.println(&quot;- Summary -&quot;); System.out.println(&quot;Final Velocity: &quot; + newData.calculateFinalVelocity()); System.out.println(&quot;Final Position: &quot; + newData.calculateFinalPosition()); System.out.println(&quot;Displacement: &quot; + (newData.calculateFinalPosition() - newData.position)); } } OneDimensionalPhysics.main(null); . Enter position, in meters: 1.0 Enter velocity, in meters per second: 2.0 Enter acceleration, in meters per second squared: 3.0 Enter time, in second: 4.0 - Choose an Option - 0. Calculate final velocity 1. Calculate final position 2. Calculate displacement 3. Exit Menu option: 0 Final Velocity: 14.0 Menu option: 1 Final Position: 33.0 Menu option: 2 Displacement: 32.0 Menu option: 3 Goodbye! - Summary - Final Velocity: 14.0 Final Position: 33.0 Displacement: 32.0 .",
            "url": "https://mnarayan1.github.io/csa-fastpages/jupyter/2022/08/29/objects.html",
            "relUrl": "/jupyter/2022/08/29/objects.html",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post11": {
            "title": "Bash and Installation Checks",
            "content": "Bash basics . pwd ## chose directory to work in cd vscode ## list contents of directory ls -al ## show contents of file cat README.md . Python . python --version python2 --version . Python 3.9.12 Python 2.7.18 . Conda Check . test=$(conda list | grep -c &quot;jupyter&quot;) if [ $test -gt 0 ]; then echo &quot;conda and jupyter installed correctly&quot; else echo &quot;conda and jupyter not installed correctly&quot; fi . conda and jupyter installed correctly . Jupyter Check . jupyter --version jupyter kernelspec list . Selected Jupyter core packages... IPython : 8.2.0 ipykernel : 6.9.1 ipywidgets : 7.6.5 jupyter_client : 6.1.12 jupyter_core : 4.9.2 jupyter_server : 1.13.5 jupyterlab : 3.3.2 nbclient : 0.5.13 nbconvert : 6.4.4 nbformat : 5.3.0 notebook : 6.4.8 qtconsole : 5.3.0 traitlets : 5.1.1 Available kernels: bash /home/mnarayan1/.local/share/jupyter/kernels/bash java /home/mnarayan1/.local/share/jupyter/kernels/java javascript /home/mnarayan1/.local/share/jupyter/kernels/javascript python3 /home/mnarayan1/.local/share/jupyter/kernels/python3 . Java . java --version javac --version . openjdk 11.0.16 2022-07-19 OpenJDK Runtime Environment (build 11.0.16+8-post-Ubuntu-0ubuntu120.04) OpenJDK 64-Bit Server VM (build 11.0.16+8-post-Ubuntu-0ubuntu120.04, mixed mode, sharing) javac 11.0.16 . JavaScript . npm -version . 3.10.10 .",
            "url": "https://mnarayan1.github.io/csa-fastpages/jupyter/2022/08/25/installation-check.html",
            "relUrl": "/jupyter/2022/08/25/installation-check.html",
            "date": " • Aug 25, 2022"
        }
        
    
  
    
        ,"post12": {
            "title": "Primitives Hacks",
            "content": "Statistics Calculator . Calculates minimum, maximum, mean, and standard deviation from user-inputted data. . Demonstrates key learning on Primitives . . import java.util.Scanner; import java.lang.Math; public class StatsCalculator { ArrayList&lt;Double&gt; data; public StatsCalculator() { this.data = new ArrayList&lt;&gt;(); this.enterData(); } private void enterData() { Scanner input = new Scanner(System.in); System.out.print(&quot;Enter an numerical datapoint, type a non-numerical value to exit: n&quot;); while(true) { try { double sampleInput = input.nextDouble(); System.out.println(sampleInput); this.data.add(sampleInput); } catch (Exception e) { input.close(); break; } } } public double findMax() { double max = this.data.get(0); for (double num : this.data) { if (num &gt; max) { max = num; } } return max; } public double findMin() { double min = this.data.get(0); for (double num : this.data) { if (num &lt; min) { min = num; } } return min; } public double findAverage() { double total = 0; for (double num : this.data) { total += num; } return total/this.data.size(); } public double findStandardDeviation() { double sum = 0; for (double num : this.data) { sum += num; } double mean = sum/this.data.size(); double standardDeviation = 0; for (double num : this.data) { standardDeviation += Math.pow(num - mean, 2); } return Math.sqrt(standardDeviation/(this.data.size() - 1)); } public static void main(String[] args) { StatsCalculator newData = new StatsCalculator(); System.out.println(&quot; n-- summary --&quot;); System.out.println(&quot;data: &quot; + newData.data); System.out.println(&quot;maximum: &quot; + newData.findMax()); System.out.println(&quot;minimum: &quot; + newData.findMin()); System.out.println(&quot;mean: &quot; + newData.findAverage()); System.out.println(&quot;standard deviation: &quot; + newData.findStandardDeviation()); } } StatsCalculator.main(null); . Enter an numerical datapoint, type a non-numerical value to exit: 1.0 4.0 7.0 8.0 -- summary -- data: [1.0, 4.0, 7.0, 8.0] maximum: 8.0 minimum: 1.0 mean: 5.0 standard deviation: 3.1622776601683795 .",
            "url": "https://mnarayan1.github.io/csa-fastpages/jupyter/2022/08/23/primitives.html",
            "relUrl": "/jupyter/2022/08/23/primitives.html",
            "date": " • Aug 23, 2022"
        }
        
    
  
    
        ,"post13": {
            "title": "Python Notebook",
            "content": "Code . print(&#39;Hello world!&#39;) . Hello world! .",
            "url": "https://mnarayan1.github.io/csa-fastpages/jupyter/2022/08/21/python-notebook.html",
            "relUrl": "/jupyter/2022/08/21/python-notebook.html",
            "date": " • Aug 21, 2022"
        }
        
    
  
    
        ,"post14": {
            "title": "Java Notebook",
            "content": "Code . System.out.println(&quot;Hello world!&quot;) . Hello world! .",
            "url": "https://mnarayan1.github.io/csa-fastpages/jupyter/2022/08/21/java-notebook.html",
            "relUrl": "/jupyter/2022/08/21/java-notebook.html",
            "date": " • Aug 21, 2022"
        }
        
    
  
    
        ,"post15": {
            "title": "First Post",
            "content": "“Wow, markdown is pretty cool.” ~ someone . Markdown Usage . This | is | a | list | . I promise I know how to format text. .",
            "url": "https://mnarayan1.github.io/csa-fastpages/markdown/2022/08/20/first-page.html",
            "relUrl": "/markdown/2022/08/20/first-page.html",
            "date": " • Aug 20, 2022"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://mnarayan1.github.io/csa-fastpages/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
      ,"page3": {
          "title": "Notes",
          "content": "Notes . Primitives Lesson . . Primitives: Basic data types, don’t store any information beyond the data itself (ie. int, char, float, double) | Wrapper Classes: More complex, similar to objects. Can run methods on wrapper classes (ie. String) | . Objects . Create instance of object: Painter mypainter = new Painter(); Scanner myScanner = new Scanner(System.in); . | Call methods on object myPainter.turnLeft(); . | Switch statements can be used in control flow switch (selection) { case 0: System.out.print(&quot;Goodbye, World!&quot;); quit = true; break; case 1: System.out.print(&quot;Hello, World!&quot;); break; default: System.out.print(&quot;Error!&quot;); break; } . | Constructor: Can set initial values of an object public class Number { int x; public Number() { x = 5; //initializing value of x in constructor } } . -Inheritance: An object can inherit the characteristics of a parent object (ie. methods) . public class PainterPlus extends Painter { //must extend parent class public PainterPlus() { super(); //must call this in constructor } } . | .",
          "url": "https://mnarayan1.github.io/csa-fastpages/_pages/notes.html",
          "relUrl": "/_pages/notes.html",
          "date": ""
      }
      
  

  
  

  

  
  

  

  
  

  
  

  

  
  

  
      ,"page12": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://mnarayan1.github.io/csa-fastpages/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}